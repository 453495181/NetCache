<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
<#@ include file="FuncHelper.Class.tt"#>
using System;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;

namespace NetCache
{
    internal static partial class FuncHelper
    {
<#  var parameters = new Dictionary<string, string>
    {
        { "TK", "key" },
        { "TimeSpan", "expiry" },
        { "CancellationToken", "cancellationToken" },
    };
    var parameterTypes = parameters.Keys.ToArray();
    var funcs = Enumerable.Range(1, parameterTypes.Length)
        .SelectMany(index => PermutationAndCombination<string>.GetPermutation(parameterTypes, index))
        .Union(new [] { Array.Empty<string>() })
        .OrderBy(types => types.Length)
        .ThenBy(types =>
        {
            var order = 0;

            foreach (var type in types)
                for (var index = 0; index < parameterTypes.Length; index++)
                {
                    if (parameterTypes[index] == type)
                    {
                        order = order * 10 + index;

                        continue;
                    }
                }

            return order;
        })
        .ToArray(); #>
        #region Sync Wrap

<#  foreach(var types in funcs)
    { #>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Func<<#= string.Join(", ", parameterTypes) #>, TV> Wrap<TK, TV>(Func<<#= string.Join(", ", types.Length > 0 ? types.Union(new [] { "" }) : types) #>TV> func) =>
            (<#= string.Join(", ", parameters.Values) #>) => func(<#= string.Join(", ", types.Select(p => parameters[p])) #>);

<#  } #>
        #endregion

        #region Async Wrap

<#  foreach(var types in funcs)
    { #>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Func<<#= string.Join(", ", parameterTypes) #>, ValueTask<TV>> WrapAsync<TK, TV>(Func<<#= string.Join(", ", types.Length > 0 ? types.Union(new [] { "" }) : types) #>TV> func) =>
            (<#= string.Join(", ", parameters.Values) #>) => new ValueTask<TV>(func(<#= string.Join(", ", types.Select(p => parameters[p])) #>));

<#  } #>
        #endregion

        #region Task Wrap

<#  foreach(var types in funcs)
    { #>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Func<<#= string.Join(", ", parameterTypes) #>, ValueTask<TV>> WrapAsync<TK, TV>(Func<<#= string.Join(", ", types.Length > 0 ? types.Union(new [] { "" }) : types) #>Task<TV>> func) =>
            (<#= string.Join(", ", parameters.Values) #>) => new ValueTask<TV>(func(<#= string.Join(", ", types.Select(p => parameters[p])) #>));

<#  } #>
        #endregion

        #region ValueTask Wrap

<#  foreach(var types in funcs)
    { #>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Func<<#= string.Join(", ", parameterTypes) #>, ValueTask<TV>> WrapAsync<TK, TV>(Func<<#= string.Join(", ", types.Length > 0 ? types.Union(new [] { "" }) : types) #>ValueTask<TV>> func) =>
            (<#= string.Join(", ", parameters.Values) #>) => func(<#= string.Join(", ", types.Select(p => parameters[p])) #>);

<#  } #>
        #endregion
    }
}
